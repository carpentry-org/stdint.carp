(local-include "../lib/stdint_helper.h")

(register-type Uint8)
(register-type Uint16)
(register-type Uint32)
(register-type Uint64)
(register-type Int8)
(register-type Int16)
(register-type Int32)
(register-type Int64)

(defmodule Int8
  (register = (λ [Int8 Int8] Bool))
  (register > (λ [Int8 Int8] Bool))
  (register < (λ [Int8 Int8] Bool))
  (register + (λ [Int8 Int8] Int8))
  (register - (λ [Int8 Int8] Int8))
  (register * (λ [Int8 Int8] Int8))
  (register / (λ [Int8 Int8] Int8))
  (register << (λ [Int8 Int8] Int8))
  (register >> (λ [Int8 Int8] Int8))
  (register bor (λ [Int8 Int8] Int8))
  (register band (λ [Int8 Int8] Int8))
  (register bnot (λ [Int8] Int8))
  (register bxor (λ [Int8 Int8] Int8))
  (register to-long (λ [Int8] Long))
  (register from-long (λ [Long] Int8))
  (register str (λ [Int8] String))

  (defn /= [a b]
    (not (= a b)))
)

(defmodule Int16
  (register = (λ [Int16 Int16] Bool))
  (register > (λ [Int16 Int16] Bool))
  (register < (λ [Int16 Int16] Bool))
  (register + (λ [Int16 Int16] Int16))
  (register - (λ [Int16 Int16] Int16))
  (register * (λ [Int16 Int16] Int16))
  (register / (λ [Int16 Int16] Int16))
  (register << (λ [Int16 Int16] Int16))
  (register >> (λ [Int16 Int16] Int16))
  (register bor (λ [Int16 Int16] Int16))
  (register band (λ [Int16 Int16] Int16))
  (register bnot (λ [Int16] Int16))
  (register bxor (λ [Int16 Int16] Int16))
  (register to-long (λ [Int16] Long))
  (register from-long (λ [Long] Int16))
  (register str (λ [Int16] String))

  (defn /= [a b]
    (not (= a b)))
)

(defmodule Int32
  (register = (λ [Int32 Int32] Bool))
  (register > (λ [Int32 Int32] Bool))
  (register < (λ [Int32 Int32] Bool))
  (register + (λ [Int32 Int32] Int32))
  (register - (λ [Int32 Int32] Int32))
  (register * (λ [Int32 Int32] Int32))
  (register / (λ [Int32 Int32] Int32))
  (register << (λ [Int32 Int32] Int32))
  (register >> (λ [Int32 Int32] Int32))
  (register bor (λ [Int32 Int32] Int32))
  (register band (λ [Int32 Int32] Int32))
  (register bnot (λ [Int32] Int32))
  (register bxor (λ [Int32 Int32] Int32))
  (register to-long (λ [Int32] Long))
  (register from-long (λ [Long] Int32))
  (register str (λ [Int32] String))

  (defn /= [a b]
    (not (= a b)))
)

(defmodule Int64
  (register = (λ [Int64 Int64] Bool))
  (register > (λ [Int64 Int64] Bool))
  (register < (λ [Int64 Int64] Bool))
  (register + (λ [Int64 Int64] Int64))
  (register - (λ [Int64 Int64] Int64))
  (register * (λ [Int64 Int64] Int64))
  (register / (λ [Int64 Int64] Int64))
  (register << (λ [Int64 Int64] Int64))
  (register >> (λ [Int64 Int64] Int64))
  (register bor (λ [Int64 Int64] Int64))
  (register band (λ [Int64 Int64] Int64))
  (register bnot (λ [Int64] Int64))
  (register bxor (λ [Int64 Int64] Int64))
  (register to-long (λ [Int64] Long))
  (register from-long (λ [Long] Int64))
  (register str (λ [Int64] String))

  (defn /= [a b]
    (not (= a b)))
)

(defmodule Uint8
  (register = (λ [Uint8 Uint8] Bool))
  (register > (λ [Uint8 Uint8] Bool))
  (register < (λ [Uint8 Uint8] Bool))
  (register + (λ [Uint8 Uint8] Uint8))
  (register - (λ [Uint8 Uint8] Uint8))
  (register * (λ [Uint8 Uint8] Uint8))
  (register / (λ [Uint8 Uint8] Uint8))
  (register << (λ [Uint8 Uint8] Uint8))
  (register >> (λ [Uint8 Uint8] Uint8))
  (register bor (λ [Uint8 Uint8] Uint8))
  (register band (λ [Uint8 Uint8] Uint8))
  (register bnot (λ [Uint8] Uint8))
  (register bxor (λ [Uint8 Uint8] Uint8))
  (register to-long (λ [Uint8] Long))
  (register from-long (λ [Long] Uint8))
  (register str (λ [Uint8] String))

  (defn /= [a b]
    (not (= a b)))
)

(defmodule Uint16
  (register = (λ [Uint16 Uint16] Bool))
  (register > (λ [Uint16 Uint16] Bool))
  (register < (λ [Uint16 Uint16] Bool))
  (register + (λ [Uint16 Uint16] Uint16))
  (register - (λ [Uint16 Uint16] Uint16))
  (register * (λ [Uint16 Uint16] Uint16))
  (register / (λ [Uint16 Uint16] Uint16))
  (register << (λ [Uint16 Uint16] Uint16))
  (register >> (λ [Uint16 Uint16] Uint16))
  (register bor (λ [Uint16 Uint16] Uint16))
  (register band (λ [Uint16 Uint16] Uint16))
  (register bnot (λ [Uint16] Uint16))
  (register bxor (λ [Uint16 Uint16] Uint16))
  (register to-long (λ [Uint16] Long))
  (register from-long (λ [Long] Uint16))
  (register str (λ [Uint16] String))

  (defn /= [a b]
    (not (= a b)))
)

(defmodule Uint32
  (register = (λ [Uint32 Uint32] Bool))
  (register > (λ [Uint32 Uint32] Bool))
  (register < (λ [Uint32 Uint32] Bool))
  (register + (λ [Uint32 Uint32] Uint32))
  (register - (λ [Uint32 Uint32] Uint32))
  (register * (λ [Uint32 Uint32] Uint32))
  (register / (λ [Uint32 Uint32] Uint32))
  (register << (λ [Uint32 Uint32] Uint32))
  (register >> (λ [Uint32 Uint32] Uint32))
  (register bor (λ [Uint32 Uint32] Uint32))
  (register band (λ [Uint32 Uint32] Uint32))
  (register bnot (λ [Uint32] Uint32))
  (register bxor (λ [Uint32 Uint32] Uint32))
  (register to-long (λ [Uint32] Long))
  (register from-long (λ [Long] Uint32))
  (register str (λ [Uint32] String))

  (defn /= [a b]
    (not (= a b)))
)

(defmodule Uint64
  (register = (λ [Uint64 Uint64] Bool))
  (register > (λ [Uint64 Uint64] Bool))
  (register < (λ [Uint64 Uint64] Bool))
  (register + (λ [Uint64 Uint64] Uint64))
  (register - (λ [Uint64 Uint64] Uint64))
  (register * (λ [Uint64 Uint64] Uint64))
  (register / (λ [Uint64 Uint64] Uint64))
  (register << (λ [Uint64 Uint64] Uint64))
  (register >> (λ [Uint64 Uint64] Uint64))
  (register bor (λ [Uint64 Uint64] Uint64))
  (register band (λ [Uint64 Uint64] Uint64))
  (register bnot (λ [Uint64] Uint64))
  (register bxor (λ [Uint64 Uint64] Uint64))
  (register to-long (λ [Uint64] Long))
  (register from-long (λ [Long] Uint64))
  (register str (λ [Uint64] String))

  (defn /= [a b]
    (not (= a b)))
)

